


CREATE TABLE IF NOT EXISTS USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    EMAIL VARCHAR(255) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    PHONE_NUMBER VARCHAR(20),
    ROLE VARCHAR(20) NOT NULL,
    IS_DELETED BOOLEAN NOT NULL
    );

CREATE TABLE IF NOT EXISTS ADDRESS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STREET VARCHAR(255) NOT NULL,
    WARD VARCHAR(50),
    DISTRICT VARCHAR(50) NOT NULL,
    CITY VARCHAR(50) NOT NULL,
    CONTACT VARCHAR(255) NOT NULL,
    RECEIVER VARCHAR(255) NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    USER_ID INT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
    );

CREATE TABLE IF NOT EXISTS CATEGORY (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(20),
    IS_SHOWN BOOLEAN NOT NULL
    );

CREATE TABLE IF NOT EXISTS SUB_CATEGORY (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    CATEGORY_ID INT NOT NULL,
    IS_SHOWN BOOLEAN NOT NULL,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID)
    );

CREATE TABLE IF NOT EXISTS PRODUCT (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    PRICE BIGINT NOT NULL,
    STOCK INT NOT NULL,
    DESCRIPTION TEXT,
    STAR INT,
    IS_DELETED BOOLEAN NOT NULL,
    CATEGORY_ID INT NOT NULL,
    SUB_CATEGORY_ID INT NOT NULL,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID),
    FOREIGN KEY (SUB_CATEGORY_ID) REFERENCES SUB_CATEGORY(ID)
    );

CREATE TABLE IF NOT EXISTS COLOR (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    IS_DELETED BOOLEAN NOT NULL
    );

CREATE TABLE IF NOT EXISTS SIZE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    IS_DELETED BOOLEAN NOT NULL
    );

CREATE TABLE IF NOT EXISTS VARIANT (
     ID INT AUTO_INCREMENT PRIMARY KEY,
     COLOR_ID INT NOT NULL,
     SIZE_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    FOREIGN KEY (COLOR_ID) REFERENCES COLOR(ID),
    FOREIGN KEY (SIZE_ID) REFERENCES SIZE(ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
    );

CREATE TABLE IF NOT EXISTS IMAGE_PRODUCT (
     ID INT AUTO_INCREMENT PRIMARY KEY,
    URL VARCHAR(255) NOT NULL,
    PRODUCT_ID INT NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
    );


CREATE TABLE IF NOT EXISTS REVIEW (
     ID INT AUTO_INCREMENT PRIMARY KEY,
     CONTENT TEXT NOT NULL,
    TIME TIMESTAMP NOT NULL,
     STAR INT NOT NULL,
     USER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
    );

CREATE TABLE IF NOT EXISTS CART (
      ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
 TOTAL_AMOUNT BIGINT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
    );

CREATE TABLE IF NOT EXISTS CART_PRODUCT (
      ID INT AUTO_INCREMENT PRIMARY KEY,
      QUANTITY INT NOT NULL,
        PRICE BIGINT NOT NULL,
    SUBTOTAL BIGINT NOT NULL,
    CART_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    FOREIGN KEY (CART_ID) REFERENCES CART(ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
    );

CREATE TABLE IF NOT EXISTS ORDERS (
     ID INT AUTO_INCREMENT PRIMARY KEY,
     DATE TIMESTAMP NOT NULL,
    TOTAL_AMOUNT BIGINT NOT NULL,
    ADDRESS VARCHAR(255),
    USER_ID INT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
    );

CREATE TABLE IF NOT EXISTS ORDER_LINE (
     ID INT AUTO_INCREMENT PRIMARY KEY,
     QUANTITY INT NOT NULL,
     PRICE BIGINT  NOT NULL,
    SUBTOTAL BIGINT  NOT NULL,
    PRODUCT_ID INT NOT NULL,
    ORDER_ID INT NOT NULL,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID)
    );

CREATE TABLE IF NOT EXISTS SALE_VOUCHER (
      ID INT AUTO_INCREMENT PRIMARY KEY,
        CODE VARCHAR(255) NOT NULL,
    DISCOUNT DECIMAL(10, 2) NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    ORDER_ID INT NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID)
    );














































